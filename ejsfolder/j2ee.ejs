<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Application</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="shortcut icon" href="static/images/logo.avif" type="image/x-icon">
    <link rel="shortcut icon" href="static/images/logo.avif" type="image/x-icon">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="static/css/quiz.css">
    <style>

    </style>
</head>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<body>
    <script>
        
        const questions = [
            {
                question: 'The Remote Method Invocation is an API that provides a mechanism to create---- in java.',
                options: ['Standalone Application', 'Mobile Application', 'Distributed Application'],
                correctAnswer: 'Distributed Application'
            },


            {
                question: 'The runs within a Web container of a Web server',
                options: ['Web Application', 'Web components', 'Web pages'],
                correctAnswer: 'Web components'
            },

            {
                question: 'Status code---indicate that there is no request resource.',
                options: ['500', '404', '401', '501'],
                correctAnswer: '404'
            },


            {
                question: 'A---serves as a runtime environment for a Web application and communicates with other web containers.',
                options: ['Web Server', 'Web container', 'Web components'],
                correctAnswer: 'Web container'
            },


            {
                question: 'Servlet and JSP run in a---.',
                options: ['Applet  Container', 'Web Container', 'Web components'],
                correctAnswer: 'Web Container'
            },


            {
                question: 'Which HTTP request method sends the data of unlimited length to Web Server',
                options: ['GET', 'PUT', 'POST'],
                correctAnswer: 'POST'
            },


            {
                question: '---supports print() methods for displaying Java primitive data types.',
                options: ['PrintStream', 'OutputStream', 'DataOutputStream'],
                correctAnswer: 'PrintStream'
            },


            {
                question: '----class supports readLine() method to receive the response from server.',
                options: ['InputStreamReader', 'Input Stream', 'DataInputStream'],
                correctAnswer: 'InputStreamReader'
            },

            {
                question: '.---Program marshals argument data and unmarshals results data.',
                options: ['Stub', 'Client', 'Server'],
                correctAnswer: 'Stub'
            },


            {
                question: '---Protocol sends independent packets of data from one application to another.',
                options: ['Internet', 'Transmission Control', 'User Datagram'],
                correctAnswer: 'User Datagram'
            }
        ]
        
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        shuffleArray(questions);
        let currentQuestionIndex = 0;
        var marks = 0;
        let userAnswers = [];
        let timer; // Variable to store the timer
        const overallTimeLimit = 600; // 5 minutes in seconds
        var spend = 0;
        function startTimer() {
            let timeLeft = overallTimeLimit;
            timer = setInterval(function () {
                timeLeft--;
                if (timeLeft) {
                    spend += 1;
                }
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    displayResults();
                }
                updateTimerDisplay(timeLeft, spend);
            }, 1000);
        }

        function updateTimerDisplay(seconds, spendseco) {
            const timespend = document.getElementById('spend');
            const timerElement = document.getElementById('timer');
            if (timespend) {
                const sminutes = Math.floor(spendseco / 60);
                const spendseconds = spendseco % 60;
                timespend.textContent = `Time spent:${sminutes}m ${spendseconds}s`;
            }

            if (timerElement) {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                timerElement.textContent = `Time Left: ${minutes}m ${remainingSeconds}s`;
            }
        }
        function selectAnswer(index) {
            const userAnswer = questions[currentQuestionIndex]?.options[index];
            const correctAnswer = questions[currentQuestionIndex]?.correctAnswer;
            userAnswers.push({
                question: questions[currentQuestionIndex]?.question,
                userAnswer,
                correctAnswer,
            });
            if (userAnswer === correctAnswer) {
                marks++;
            }

            currentQuestionIndex++;

            if (currentQuestionIndex < questions.length) {
                updateQuiz();
            } else {

                displayResults();
            }
        }
        window.onload = startTimer();
        function updateQuiz() {
            document.body.innerHTML = `
                <div class="container" >
                    <div class="quiz-box">
                        <h1>Quiz</h1>
                        <div class="quiz-header">
                            <h1><span>CST-2205</span></h1>
                            <span id="timer" class="header-score"></span>
                            <span class="header-score class="text-primary">Score: ${marks}/${questions.length}</span>
                        </div>
                        <div id="spend" class="header-score"></div>
                        <div class="quiz-question">
                            <p>${questions[currentQuestionIndex]?.question}</p>
                        </div>
                        <div class="options-list">
                            ${questions[currentQuestionIndex]?.options.map((option, index) => `
                                <button onclick="selectAnswer(${index})">${option}</button>
                            `).join('')}
                        </div>
                        <div class="quiz-footer">
                            <span class="question-total">${currentQuestionIndex + 1} of ${questions.length} questions</span>
                        </div>
                    </div>
                </div>
            `;
        }
        function displayResults() {
            clearInterval(timer); // Stop the timer
            submitTotalMarks();
            document.body.innerHTML = `<body class="bg-success-subtle">
            <center >
                <div class="container-fluid col-md-6 col-sm-4 style="max-height: 1000px; overflow-y: auto;">
                    <div class="quiz-box">
                        <h1>Quiz</h1>
                        <div class="quiz-header">
                            <h1><span>CST-2205</span></h1>
                            <span class="header-score ">Score: ${marks}<span><span class="header-score ">/${questions.length}</span>
                        </div>
                        <div class="results-container ">
                            <h2>Results</h2>
                            ${userAnswers.map((answer, index) => `
                                <div class="question-result">
                                    <h3>Question ${index + 1}</h3>
                                    <div class="result-details">
                                        <p class="text-primary"><strong>Question:</strong>${answer.question}</p>
                                        <p><strong>Your Answer:</strong> ${answer.userAnswer}</p>
                                        <p class="text-success"><strong>Correct Answer:</strong> ${answer.correctAnswer}</p>
                                        <hr class="bg-dark h-25">
                                    </div>
                                </div>
                            `).join('')}
                            <div class="total-results">
                                <p>Total Questions: ${questions.length}</p>
                                <p>Total Marks: ${marks}</p>
                                <a href="home" class="text-white btn btn-primary" style="text-decoration:none;">Back</a>
                            </div>
                        </div>
                    </div>
                </div>
              </center>
              <body>
            `;

            if (marks == 10) {
                Swal.fire({
                    title: 'Outstanding',
                    icon: 'star',
                    confirmButtonText: 'OK',
                    customClass: {
                        background: 'bg-out' // Add your custom background class
                    }
                });
            }
            else if (marks >= 8) {
                Swal.fire({
                    title: 'Excellent',
                    icon: 'success',
                    confirmButtonText: 'OK',
                    customClass: {
                        background: 'bg-excellent' // Add your custom background class
                    }
                });
            } else if (marks < 8 && marks >= 5) {
                Swal.fire({
                    title: 'Good',
                    icon: 'info',
                    confirmButtonText: 'OK',
                    customClass: {
                        background: 'bg-good' // Add your custom background class
                    }
                });
            } else if (marks <= 4) {
                Swal.fire({
                    title: 'You need to try!',
                    icon: 'warning',
                    confirmButtonText: 'OK',
                    customClass: {
                        background: 'bg-try' // Add your custom background class
                    }
                });
            }
        }
        updateQuiz();

        function submitTotalMarks() {
            var cid = `<%=cid%>`;
            var cname = `<%=cname%>`;
            var uid = `<%=uid%>`;
            fetch('/totalmarks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ cid, cname, uid, marks }) // Correctly stringify the JSON object
            })
                .then(response => {
                    console.log('Total marks submitted successfully.');
                })
                .catch(error => console.error('Error:', error));
        }
    </script>

</body>

</html>